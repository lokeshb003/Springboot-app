# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: ubuntu:latest 
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Install maven and all necessary packages
          command: apt update && apt install maven openjdk-11-jdk -y
      # Then run your tests!
      - run:
          name: Package the application
          command: mvn clean package -DskipTests=true
      - run:
          name: Test the application
          command: mvn test
      - run:
          name: PIT Mutation Testing
          command: mvn org.pitest:pitest-maven:mutationCoverage
      - run:
          name: SonarQube SAST Testing
          command: mvn
      - run:
          name: OWASP Dependency Check
          command: mvn dependency-check:check
      - run:
          name: Trivy Image Scanning
          command: bash trivy-image-scan.sh
  Build-docker-image-and-push:
    docker:
      - image: docker:latest
    steps:
      - checkout

      - run:
          name: Build Docker Image
          command: docker build -t $DOCKER_IMAGE .
      - run:
          name: Login to Dockerhub
          command: docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
      - run:
          name: Push the image to Dockerhub Registry
          command: docker push $DOCKER_IMAGE



# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - Build-docker-image-and-push
